name: CI

permissions:
  contents: read
  packages: write
  deployments: write
  issues: write
  pull-requests: write

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # HUEY_IMMEDIATE: 'True'
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
      ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
    services:
      postgres:
        image: ankane/pgvector:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install --cache-dir .cache/pip -U pip
          pip install --cache-dir .cache/pip -r requirements.txt
      - name: Collect static
        run: python manage.py collectstatic --noinput
      - name: Run tests
        run: python manage.py test

  build-production:
    needs: test
    runs-on: ubuntu-latest
    env:
      ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
      ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug
        run: |
          echo "ALGOLIA_APP_ID is set: ${{ secrets.ALGOLIA_APP_ID != '' }}"
          echo "ALGOLIA_API_KEY is set: ${{ secrets.ALGOLIA_API_KEY != '' }}"
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./deployment/django/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/swotting-prod:latest
          build-args: |
            ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }}
            ALGOLIA_API_KEY=${{ secrets.ALGOLIA_API_KEY }}
    
  deploy-to-digitalocean:
    needs: build-production
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 143.110.209.181 >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install doctl
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.64.0/doctl-1.64.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin
      - name: Authenticate with DigitalOcean
        run: doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Debug SSH connection
        run: |
          ssh -v -i ~/.ssh/id_rsa root@143.110.209.181 "echo 'Connection successful'"

      - name: Deploy to DigitalOcean
        run: |
          # First create the directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no root@143.110.209.181 "mkdir -p /home/swotting"
          
          # Copy docker-compose.yml to the droplet
          scp -o StrictHostKeyChecking=no deployment/docker-compose.yml root@143.110.209.181:/home/swotting/docker-compose.yml
          
          # Create .env file with environment variables
          ssh -o StrictHostKeyChecking=no root@143.110.209.181 "cat > /home/swotting/.env << EOF
          ALGOLIA_APP_ID=${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_API_KEY=${{ secrets.ALGOLIA_API_KEY }}
          DATABASE_URL=postgres://swotting:swotting@swottingdb:5432/swotting?sslmode=disable
          CELERY_BROKER_URL=redis://redis:6379/0
          CELERY_RESULT_BACKEND=django-db
          # Add any other environment variables your application needs
          EOF"
          
          # First, pass GitHub token to droplet and login to container registry
          ssh -o StrictHostKeyChecking=no root@143.110.209.181 "docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}"
          
          # Then continue with the rest of the deployment
          ssh -o StrictHostKeyChecking=no root@143.110.209.181 "cd /home/swotting && \
            export ALGOLIA_APP_ID='${{ secrets.ALGOLIA_APP_ID }}' && \
            export ALGOLIA_API_KEY='${{ secrets.ALGOLIA_API_KEY }}' && \
            docker pull ghcr.io/${{ github.repository_owner }}/swotting-prod:latest && \
            docker ps -a && \
            docker compose down && \
            docker compose up -d && \
            CONTAINER_NAME=\$(docker compose ps -q web) && \
            (crontab -l 2>/dev/null; echo '0 4 * * * docker exec '\$CONTAINER_NAME' python manage.py scrape edx') | sort - | uniq - | crontab -"

            
# ALGOLIA_APP_ID='${{ secrets.ALGOLIA_APP_ID }}' ALGOLIA_API_KEY='${{ secrets.ALGOLIA_API_KEY }}' docker compose up -d && \
# sleep 10 && \
# CONTAINER_NAME=\$(docker compose ps -q web) && \
# docker exec \$CONTAINER_NAME python manage.py scrape edx"



  # deploy-to-digitalocean:
  #   needs: build-production
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy via SSH
  #       uses: appleboy/ssh-action@v0.1.4
  #       with:
  #         host: 165.22.29.100
  #         username: root
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           cd /home/swotting
  #           docker pull ghcr.io/${{ github.repository_owner }}/swotting-prod:latest
  #           docker compose -f deployment/docker-compose.yml down
  #           ALGOLIA_APP_ID='${{ secrets.ALGOLIA_APP_ID }}' \
  #           ALGOLIA_API_KEY='${{ secrets.ALGOLIA_API_KEY }}' \
  #           docker compose -f deployment/docker-compose.yml up -d
  #           sleep 10
  #           CONTAINER_NAME=$(docker compose -f deployment/docker-compose.yml ps -q web)
  #           docker exec $CONTAINER_NAME python manage.py scrape edx


  # deploy-to-digitalocean:
  #   needs: build-production
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up SSH agent
  #       uses: webfactory/ssh-agent@v0.5.4
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  #     - name: Deploy to DigitalOcean
  #       run: |
  #         DROPLET_IP="165.22.29.100"
  #         echo "Deploying to droplet IP: $DROPLET_IP"
          
  #         ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "
  #           cd /home/swotting &&
  #           docker pull ghcr.io/${{ github.repository_owner }}/swotting-prod:latest &&
  #           docker compose -f deployment/docker-compose.yml down &&
  #           ALGOLIA_APP_ID='${{ secrets.ALGOLIA_APP_ID }}' \
  #           ALGOLIA_API_KEY='${{ secrets.ALGOLIA_API_KEY }}' \
  #           docker compose -f deployment/docker-compose.yml up -d &&
  #           sleep 10 &&
  #           CONTAINER_NAME=\$(docker compose -f deployment/docker-compose.yml ps -q web) &&
  #           docker exec \$CONTAINER_NAME python manage.py scrape edx
  #         "


  # deploy-to-digitalocean:
  #   needs: build-production
  #   runs-on: ubuntu-latest
  #   permissions: write-all
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Install and configure doctl
  #       uses: digitalocean/action-doctl@v2
  #       with:
  #         token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  #     # Can we delete this?
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Setup SSH for Droplet access
  #       run: |
  #         # Using hardcoded IP instead of doctl lookup
  #         DROPLET_IP="165.22.29.100"
  #         echo "Deploying to droplet IP: $DROPLET_IP"
          
  #         # Test SSH connection first
  #         ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no root@$DROPLET_IP "echo 'SSH connection successful'"
          
  #         # Main deployment
  #         ssh -i ~/.ssh/id_rsa root@$DROPLET_IP "
  #           cd /home/swotting &&
  #           docker pull ghcr.io/${{ github.repository_owner }}/swotting-prod:latest &&
  #           docker compose -f deployment/docker-compose.yml down &&
  #           ALGOLIA_APP_ID='${{ secrets.ALGOLIA_APP_ID }}' \
  #           ALGOLIA_API_KEY='${{ secrets.ALGOLIA_API_KEY }}' \
  #           docker compose -f deployment/docker-compose.yml up -d &&
  #           sleep 10 &&
  #           CONTAINER_NAME=\$(docker compose -f deployment/docker-compose.yml ps -q web) &&
  #           docker exec \$CONTAINER_NAME python manage.py scrape edx
  #         "

